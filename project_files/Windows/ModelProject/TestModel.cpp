#include "TestModel.h"
#include <map>
#include "OMEDefines.h"
#include "SubIndexVal.h"
#include "ValueArchive.h"
namespace TestModelDefs
{
Model& root=*((Model*)BaseManager::GenModelObject(OME_MODEL));
Variable& v_0=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& v_1=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& v_2=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& v_3=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& v_4=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& v_5=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
StateVar& __OME__autoSV_0=*((StateVar*)BaseManager::GenModelObject(OME_STATEVAR));
StateVar& __OME__autoSV_1=*((StateVar*)BaseManager::GenModelObject(OME_STATEVAR));
StateVar& __OME__autoSV_2=*((StateVar*)BaseManager::GenModelObject(OME_STATEVAR));
StateVar& __OME__autoSV_3=*((StateVar*)BaseManager::GenModelObject(OME_STATEVAR));
StateVar& __OME__autoSV_4=*((StateVar*)BaseManager::GenModelObject(OME_STATEVAR));
StateVar& __OME__autoSV_5=*((StateVar*)BaseManager::GenModelObject(OME_STATEVAR));
StateVar& __OME__autoSV_6=*((StateVar*)BaseManager::GenModelObject(OME_STATEVAR));
StateVar& __OME__autoSV_7=*((StateVar*)BaseManager::GenModelObject(OME_STATEVAR));
Flow& __OME__autoFlow_0=*((Flow*)BaseManager::GenModelObject(OME_FLOW));
Flow& __OME__autoFlow_1=*((Flow*)BaseManager::GenModelObject(OME_FLOW));
Flow& __OME__autoFlow_2=*((Flow*)BaseManager::GenModelObject(OME_FLOW));
Flow& __OME__autoFlow_3=*((Flow*)BaseManager::GenModelObject(OME_FLOW));
Flow& __OME__autoFlow_4=*((Flow*)BaseManager::GenModelObject(OME_FLOW));
Flow& __OME__autoFlow_5=*((Flow*)BaseManager::GenModelObject(OME_FLOW));
Flow& __OME__autoFlow_6=*((Flow*)BaseManager::GenModelObject(OME_FLOW));
Flow& __OME__autoFlow_7=*((Flow*)BaseManager::GenModelObject(OME_FLOW));
Flow& __OME__autoFlow_8=*((Flow*)BaseManager::GenModelObject(OME_FLOW));
Flow& __OME__autoFlow_9=*((Flow*)BaseManager::GenModelObject(OME_FLOW));
Flow& __OME__autoFlow_10=*((Flow*)BaseManager::GenModelObject(OME_FLOW));


};
Model* TestModel::LoadModel(BaseManager* TestModelBm)
{
using namespace TestModelDefs;
using namespace OMECFuncs;
root.SetID("root");
root.SetName("root");
root.SetInternal(false);
root.SetInitNumInstances(1);
root.SetPreferredIntMethod(OMEIntegrationBlock::IM_EULER);
v_0.SetID("v_0");
v_0.SetName("delay1 test");
v_0.SetInternal(false);
v_0.SetExpr("root.__OME_autoFlow_1");
v_0.SetExpectsFile(false);
v_0.SetInitOnly(false);
root.AddVariable(&v_0);

v_1.SetID("v_1");
v_1.SetName("delay3 test");
v_1.SetInternal(false);
v_1.SetExpr("root.__OME_autoFlow_5");
v_1.SetExpectsFile(false);
v_1.SetInitOnly(false);
root.AddVariable(&v_1);

v_2.SetID("v_2");
v_2.SetName("delayN test_disabled");
v_2.SetInternal(false);
v_2.SetExpr("root.__OME_autoFlow_10");
v_2.SetExpectsFile(false);
v_2.SetInitOnly(false);
root.AddVariable(&v_2);

v_3.SetID("v_3");
v_3.SetName("Input 1");
v_3.SetInternal(false);
v_3.SetExpr("1.0");
v_3.SetExpectsFile(false);
v_3.SetInitOnly(true);
root.AddVariable(&v_3);

v_4.SetID("v_4");
v_4.SetName("Input 2");
v_4.SetInternal(false);
v_4.SetExpr("1.0");
v_4.SetExpectsFile(false);
v_4.SetInitOnly(true);
root.AddVariable(&v_4);

v_5.SetID("v_5");
v_5.SetName("Input 3");
v_5.SetInternal(false);
v_5.SetExpr("4.0");
v_5.SetExpectsFile(false);
v_5.SetInitOnly(true);
root.AddVariable(&v_5);

__OME__autoSV_0.SetID("__OME__autoSV_0");
__OME__autoSV_0.SetName("__OME__autoSV_0");
__OME__autoSV_0.SetInternal(false);
__OME__autoSV_0.SetExpr("(root.Input_1* root.Input_2)/1.0");
__OME__autoSV_0.SetAutoGenerated(true);
root.AddStateVar(&__OME__autoSV_0);

__OME__autoSV_1.SetID("__OME__autoSV_1");
__OME__autoSV_1.SetName("__OME__autoSV_1");
__OME__autoSV_1.SetInternal(false);
__OME__autoSV_1.SetExpr("(root.Input_1* root.Input_2)/3.0");
__OME__autoSV_1.SetAutoGenerated(true);
root.AddStateVar(&__OME__autoSV_1);

__OME__autoSV_2.SetID("__OME__autoSV_2");
__OME__autoSV_2.SetName("__OME__autoSV_2");
__OME__autoSV_2.SetInternal(false);
__OME__autoSV_2.SetExpr("(root.Input_1* root.Input_2)/3.0");
__OME__autoSV_2.SetAutoGenerated(true);
root.AddStateVar(&__OME__autoSV_2);

__OME__autoSV_3.SetID("__OME__autoSV_3");
__OME__autoSV_3.SetName("__OME__autoSV_3");
__OME__autoSV_3.SetInternal(false);
__OME__autoSV_3.SetExpr("(root.Input_1* root.Input_2)/3.0");
__OME__autoSV_3.SetAutoGenerated(true);
root.AddStateVar(&__OME__autoSV_3);

__OME__autoSV_4.SetID("__OME__autoSV_4");
__OME__autoSV_4.SetName("__OME__autoSV_4");
__OME__autoSV_4.SetInternal(false);
__OME__autoSV_4.SetExpr("(0.0 *root.Input_2)/4.0");
__OME__autoSV_4.SetAutoGenerated(true);
root.AddStateVar(&__OME__autoSV_4);

__OME__autoSV_5.SetID("__OME__autoSV_5");
__OME__autoSV_5.SetName("__OME__autoSV_5");
__OME__autoSV_5.SetInternal(false);
__OME__autoSV_5.SetExpr("(0.0 *root.Input_2)/4.0");
__OME__autoSV_5.SetAutoGenerated(true);
root.AddStateVar(&__OME__autoSV_5);

__OME__autoSV_6.SetID("__OME__autoSV_6");
__OME__autoSV_6.SetName("__OME__autoSV_6");
__OME__autoSV_6.SetInternal(false);
__OME__autoSV_6.SetExpr("(0.0 *root.Input_2)/4.0");
__OME__autoSV_6.SetAutoGenerated(true);
root.AddStateVar(&__OME__autoSV_6);

__OME__autoSV_7.SetID("__OME__autoSV_7");
__OME__autoSV_7.SetName("__OME__autoSV_7");
__OME__autoSV_7.SetInternal(false);
__OME__autoSV_7.SetExpr("(0.0 *root.Input_2)/4.0");
__OME__autoSV_7.SetAutoGenerated(true);
root.AddStateVar(&__OME__autoSV_7);

__OME__autoFlow_0.SetID("__OME__autoFlow_0");
__OME__autoFlow_0.SetName("");
__OME__autoFlow_0.SetInternal(false);
__OME__autoFlow_0.SetExpr("root.Input_1");
__OME__autoFlow_0.SetAutoGenerated(true);
__OME__autoFlow_0.SetTargetID("__OME__autoSV_0");
root.AddFlow(&__OME__autoFlow_0);

__OME__autoFlow_1.SetID("__OME__autoFlow_1");
__OME__autoFlow_1.SetName("__OME__autoFlow_1");
__OME__autoFlow_1.SetInternal(false);
__OME__autoFlow_1.SetExpr("__OME_autoSV_0/( root.Input_2/1.0)");
__OME__autoFlow_1.SetInitExpr("root.Input_1");
__OME__autoFlow_1.SetAutoGenerated(true);
__OME__autoFlow_1.SetSourceID("__OME__autoSV_0");
root.AddFlow(&__OME__autoFlow_1);

__OME__autoFlow_2.SetID("__OME__autoFlow_2");
__OME__autoFlow_2.SetName("");
__OME__autoFlow_2.SetInternal(false);
__OME__autoFlow_2.SetExpr("root.Input_1");
__OME__autoFlow_2.SetAutoGenerated(true);
__OME__autoFlow_2.SetTargetID("__OME__autoSV_1");
root.AddFlow(&__OME__autoFlow_2);

__OME__autoFlow_3.SetID("__OME__autoFlow_3");
__OME__autoFlow_3.SetName("__OME__autoFlow_3");
__OME__autoFlow_3.SetInternal(false);
__OME__autoFlow_3.SetExpr("__OME_autoSV_1/( root.Input_2/3.0)");
__OME__autoFlow_3.SetAutoGenerated(true);
__OME__autoFlow_3.SetSourceID("__OME__autoSV_1");
__OME__autoFlow_3.SetTargetID("__OME__autoSV_2");
root.AddFlow(&__OME__autoFlow_3);

__OME__autoFlow_4.SetID("__OME__autoFlow_4");
__OME__autoFlow_4.SetName("__OME__autoFlow_4");
__OME__autoFlow_4.SetInternal(false);
__OME__autoFlow_4.SetExpr("__OME_autoSV_2/( root.Input_2/3.0)");
__OME__autoFlow_4.SetAutoGenerated(true);
__OME__autoFlow_4.SetSourceID("__OME__autoSV_2");
__OME__autoFlow_4.SetTargetID("__OME__autoSV_3");
root.AddFlow(&__OME__autoFlow_4);

__OME__autoFlow_5.SetID("__OME__autoFlow_5");
__OME__autoFlow_5.SetName("__OME__autoFlow_5");
__OME__autoFlow_5.SetInternal(false);
__OME__autoFlow_5.SetExpr("__OME_autoSV_3/( root.Input_2/3.0)");
__OME__autoFlow_5.SetInitExpr("root.Input_1");
__OME__autoFlow_5.SetAutoGenerated(true);
__OME__autoFlow_5.SetSourceID("__OME__autoSV_3");
root.AddFlow(&__OME__autoFlow_5);

__OME__autoFlow_6.SetID("__OME__autoFlow_6");
__OME__autoFlow_6.SetName("");
__OME__autoFlow_6.SetInternal(false);
__OME__autoFlow_6.SetExpr("root.Input_1");
__OME__autoFlow_6.SetAutoGenerated(true);
__OME__autoFlow_6.SetTargetID("__OME__autoSV_4");
root.AddFlow(&__OME__autoFlow_6);

__OME__autoFlow_7.SetID("__OME__autoFlow_7");
__OME__autoFlow_7.SetName("__OME__autoFlow_7");
__OME__autoFlow_7.SetInternal(false);
__OME__autoFlow_7.SetExpr("__OME_autoSV_4/(root.Input_2/4.0)");
__OME__autoFlow_7.SetAutoGenerated(true);
__OME__autoFlow_7.SetSourceID("__OME__autoSV_4");
__OME__autoFlow_7.SetTargetID("__OME__autoSV_5");
root.AddFlow(&__OME__autoFlow_7);

__OME__autoFlow_8.SetID("__OME__autoFlow_8");
__OME__autoFlow_8.SetName("__OME__autoFlow_8");
__OME__autoFlow_8.SetInternal(false);
__OME__autoFlow_8.SetExpr("__OME_autoSV_5/(root.Input_2/4.0)");
__OME__autoFlow_8.SetAutoGenerated(true);
__OME__autoFlow_8.SetSourceID("__OME__autoSV_5");
__OME__autoFlow_8.SetTargetID("__OME__autoSV_6");
root.AddFlow(&__OME__autoFlow_8);

__OME__autoFlow_9.SetID("__OME__autoFlow_9");
__OME__autoFlow_9.SetName("__OME__autoFlow_9");
__OME__autoFlow_9.SetInternal(false);
__OME__autoFlow_9.SetExpr("__OME_autoSV_6/(root.Input_2/4.0)");
__OME__autoFlow_9.SetAutoGenerated(true);
__OME__autoFlow_9.SetSourceID("__OME__autoSV_6");
__OME__autoFlow_9.SetTargetID("__OME__autoSV_7");
root.AddFlow(&__OME__autoFlow_9);

__OME__autoFlow_10.SetID("__OME__autoFlow_10");
__OME__autoFlow_10.SetName("__OME__autoFlow_10");
__OME__autoFlow_10.SetInternal(false);
__OME__autoFlow_10.SetExpr("__OME_autoSV_7/(root.Input_2/4.0)");
__OME__autoFlow_10.SetInitExpr("0.0 ");
__OME__autoFlow_10.SetAutoGenerated(true);
__OME__autoFlow_10.SetSourceID("__OME__autoSV_7");
root.AddFlow(&__OME__autoFlow_10);

root.JoinLinks(true,true);
//Begin Lookup table


Register(&root);
Register(&v_0);
Register(&v_1);
Register(&v_2);
Register(&v_3);
Register(&v_4);
Register(&v_5);
Register(&__OME__autoSV_0);
Register(&__OME__autoSV_1);
Register(&__OME__autoSV_2);
Register(&__OME__autoSV_3);
Register(&__OME__autoSV_4);
Register(&__OME__autoSV_5);
Register(&__OME__autoSV_6);
Register(&__OME__autoSV_7);
Register(&__OME__autoFlow_0);
Register(&__OME__autoFlow_1);
Register(&__OME__autoFlow_2);
Register(&__OME__autoFlow_3);
Register(&__OME__autoFlow_4);
Register(&__OME__autoFlow_5);
Register(&__OME__autoFlow_6);
Register(&__OME__autoFlow_7);
Register(&__OME__autoFlow_8);
Register(&__OME__autoFlow_9);
Register(&__OME__autoFlow_10);
root.JoinAliases();
return &root;
}

void TestModel::DoInit(const OME_SCALAR & TestModelTime, BaseManager* TestModelBm,ISpatialDataProvider* TestModelSDP)
{
using namespace TestModelDefs;
using namespace OMECFuncs;
//=-=-=-=-=-=-=-=-=-= v_3 (Input_1)
v_3.Reset(TestModelBm);
v_3=(OME_SCALAR)1.0;
v_3.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_6 ()
__OME__autoFlow_6.Reset(TestModelBm);
__OME__autoFlow_6=(OME_SCALAR)v_3;
__OME__autoFlow_6.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_2 ()
__OME__autoFlow_2.Reset(TestModelBm);
__OME__autoFlow_2=(OME_SCALAR)v_3;
__OME__autoFlow_2.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_0 ()
__OME__autoFlow_0.Reset(TestModelBm);
__OME__autoFlow_0=(OME_SCALAR)v_3;
__OME__autoFlow_0.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= v_4 (Input_2)
v_4.Reset(TestModelBm);
v_4=(OME_SCALAR)1.0;
v_4.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoSV_2 (__OME_autoSV_2)
__OME__autoSV_2.Reset(TestModelBm);
__OME__autoSV_2=(OME_SCALAR)(v_3*v_4)/3.0;
__OME__autoSV_2.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_4 (__OME_autoFlow_4)
__OME__autoFlow_4.Reset(TestModelBm);
__OME__autoFlow_4=(OME_SCALAR)__OME__autoSV_2/(v_4/3.0);
__OME__autoFlow_4.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoSV_1 (__OME_autoSV_1)
__OME__autoSV_1.Reset(TestModelBm);
__OME__autoSV_1=(OME_SCALAR)(v_3*v_4)/3.0;
__OME__autoSV_1.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_3 (__OME_autoFlow_3)
__OME__autoFlow_3.Reset(TestModelBm);
__OME__autoFlow_3=(OME_SCALAR)__OME__autoSV_1/(v_4/3.0);
__OME__autoFlow_3.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoSV_3 (__OME_autoSV_3)
__OME__autoSV_3.Reset(TestModelBm);
__OME__autoSV_3=(OME_SCALAR)(v_3*v_4)/3.0;
__OME__autoSV_3.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_5 (__OME_autoFlow_5)
__OME__autoFlow_5.Reset(TestModelBm);
__OME__autoFlow_5=(OME_SCALAR)v_3;
__OME__autoFlow_5.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= v_1 (delay3_test)
v_1.Reset(TestModelBm);
v_1=(OME_SCALAR)__OME__autoFlow_5;
v_1.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoSV_0 (__OME_autoSV_0)
__OME__autoSV_0.Reset(TestModelBm);
__OME__autoSV_0=(OME_SCALAR)(v_3*v_4)/1.0;
__OME__autoSV_0.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_1 (__OME_autoFlow_1)
__OME__autoFlow_1.Reset(TestModelBm);
__OME__autoFlow_1=(OME_SCALAR)v_3;
__OME__autoFlow_1.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= v_0 (delay1_test)
v_0.Reset(TestModelBm);
v_0=(OME_SCALAR)__OME__autoFlow_1;
v_0.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoSV_6 (__OME_autoSV_6)
__OME__autoSV_6.Reset(TestModelBm);
__OME__autoSV_6=(OME_SCALAR)(0.0*v_4)/4.0;
__OME__autoSV_6.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_9 (__OME_autoFlow_9)
__OME__autoFlow_9.Reset(TestModelBm);
__OME__autoFlow_9=(OME_SCALAR)__OME__autoSV_6/(v_4/4.0);
__OME__autoFlow_9.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoSV_5 (__OME_autoSV_5)
__OME__autoSV_5.Reset(TestModelBm);
__OME__autoSV_5=(OME_SCALAR)(0.0*v_4)/4.0;
__OME__autoSV_5.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_8 (__OME_autoFlow_8)
__OME__autoFlow_8.Reset(TestModelBm);
__OME__autoFlow_8=(OME_SCALAR)__OME__autoSV_5/(v_4/4.0);
__OME__autoFlow_8.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoSV_4 (__OME_autoSV_4)
__OME__autoSV_4.Reset(TestModelBm);
__OME__autoSV_4=(OME_SCALAR)(0.0*v_4)/4.0;
__OME__autoSV_4.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_7 (__OME_autoFlow_7)
__OME__autoFlow_7.Reset(TestModelBm);
__OME__autoFlow_7=(OME_SCALAR)__OME__autoSV_4/(v_4/4.0);
__OME__autoFlow_7.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoSV_7 (__OME_autoSV_7)
__OME__autoSV_7.Reset(TestModelBm);
__OME__autoSV_7=(OME_SCALAR)(0.0*v_4)/4.0;
__OME__autoSV_7.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_10 (__OME_autoFlow_10)
__OME__autoFlow_10.Reset(TestModelBm);
__OME__autoFlow_10=(OME_SCALAR)0.0;
__OME__autoFlow_10.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= v_2 (delayN_test_disabled)
v_2.Reset(TestModelBm);
v_2=(OME_SCALAR)__OME__autoFlow_10;
v_2.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= v_5 (Input_3)
v_5.Reset(TestModelBm);
v_5=(OME_SCALAR)4.0;
v_5.BatchInitialize(TestModelTime,TestModelBm);
AdjustTempPool();
}

void TestModel::DoUpdate(const OME_SCALAR & TestModelTime, BaseManager* TestModelBm,ISpatialDataProvider* TestModelSDP)
{
using namespace TestModelDefs;
using namespace OMECFuncs;
//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_6 ()
__OME__autoFlow_6=(OME_SCALAR)v_3;

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_2 ()
__OME__autoFlow_2=(OME_SCALAR)v_3;

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_0 ()
__OME__autoFlow_0=(OME_SCALAR)v_3;

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_9 (__OME_autoFlow_9)
__OME__autoFlow_9=(OME_SCALAR)__OME__autoSV_6/(v_4/4.0);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_8 (__OME_autoFlow_8)
__OME__autoFlow_8=(OME_SCALAR)__OME__autoSV_5/(v_4/4.0);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_7 (__OME_autoFlow_7)
__OME__autoFlow_7=(OME_SCALAR)__OME__autoSV_4/(v_4/4.0);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_4 (__OME_autoFlow_4)
__OME__autoFlow_4=(OME_SCALAR)__OME__autoSV_2/(v_4/3.0);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_3 (__OME_autoFlow_3)
__OME__autoFlow_3=(OME_SCALAR)__OME__autoSV_1/(v_4/3.0);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_5 (__OME_autoFlow_5)
__OME__autoFlow_5=(OME_SCALAR)__OME__autoSV_3/(v_4/3.0);

//=-=-=-=-=-=-=-=-=-= v_1 (delay3_test)
v_1=(OME_SCALAR)__OME__autoFlow_5;

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_10 (__OME_autoFlow_10)
__OME__autoFlow_10=(OME_SCALAR)__OME__autoSV_7/(v_4/4.0);

//=-=-=-=-=-=-=-=-=-= v_2 (delayN_test_disabled)
v_2=(OME_SCALAR)__OME__autoFlow_10;

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_1 (__OME_autoFlow_1)
__OME__autoFlow_1=(OME_SCALAR)__OME__autoSV_0/(v_4/1.0);

//=-=-=-=-=-=-=-=-=-= v_0 (delay1_test)
v_0=(OME_SCALAR)__OME__autoFlow_1;
AdjustTempPool();
}

