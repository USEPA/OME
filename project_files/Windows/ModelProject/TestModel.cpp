#include "TestModel.h"
#include <map>
#include "OMEDefines.h"
#include "SubIndexVal.h"
#include "ValueArchive.h"
namespace TestModelDefs
{
Model& root=*((Model*)BaseManager::GenModelObject(OME_MODEL));
Variable& v_0=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& v_1=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& v_2=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& v_3=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& v_4=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& v_5=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& v_6=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& __OME__autoVar_0=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& __OME__autoVar_1=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& __OME__autoVar_2=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& __OME__autoVar_3=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& __OME__autoVar_4=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& __OME__autoVar_5=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
Variable& __OME__autoVar_6=*((Variable*)BaseManager::GenModelObject(OME_VARIABLE));
StateVar& __OME__autoSV_0=*((StateVar*)BaseManager::GenModelObject(OME_STATEVAR));
StateVar& __OME__autoSV_1=*((StateVar*)BaseManager::GenModelObject(OME_STATEVAR));
Flow& __OME__autoFlow_0=*((Flow*)BaseManager::GenModelObject(OME_FLOW));
Flow& __OME__autoFlow_1=*((Flow*)BaseManager::GenModelObject(OME_FLOW));


};
Model* TestModel::LoadModel(BaseManager* TestModelBm)
{
using namespace TestModelDefs;
using namespace OMECFuncs;
root.SetID("root");
root.SetName("root");
root.SetInternal(false);
root.SetInitNumInstances(1);
root.SetPreferredIntMethod(OMEIntegrationBlock::IM_EULER);
v_0.SetID("v_0");
v_0.SetName("forecast test");
v_0.SetInternal(false);
v_0.SetExpr("root.__OME_autoVar_3");
v_0.SetExpectsFile(false);
v_0.SetInitOnly(false);
root.AddVariable(&v_0);

v_1.SetID("v_1");
v_1.SetName("Input 1");
v_1.SetInternal(false);
v_1.SetExpr("1.0");
v_1.SetExpectsFile(false);
v_1.SetInitOnly(true);
root.AddVariable(&v_1);

v_2.SetID("v_2");
v_2.SetName("Input 2");
v_2.SetInternal(false);
v_2.SetExpr("1.0");
v_2.SetExpectsFile(false);
v_2.SetInitOnly(true);
root.AddVariable(&v_2);

v_3.SetID("v_3");
v_3.SetName("Input 3");
v_3.SetInternal(false);
v_3.SetExpr("1.0");
v_3.SetExpectsFile(false);
v_3.SetInitOnly(true);
root.AddVariable(&v_3);

v_4.SetID("v_4");
v_4.SetName("pulse test");
v_4.SetInternal(false);
v_4.SetExpr("pulse(1.0,root.Input_1,root.Input_2)");
v_4.SetExpectsFile(false);
v_4.SetInitOnly(false);
root.AddVariable(&v_4);

v_5.SetID("v_5");
v_5.SetName("step test");
v_5.SetInternal(false);
v_5.SetExpr("step(root.Input_1,root.Input_2)");
v_5.SetExpectsFile(false);
v_5.SetInitOnly(false);
root.AddVariable(&v_5);

v_6.SetID("v_6");
v_6.SetName("trend test");
v_6.SetInternal(false);
v_6.SetExpr("root.__OME_autoVar_6");
v_6.SetExpectsFile(false);
v_6.SetInitOnly(false);
root.AddVariable(&v_6);

__OME__autoVar_0.SetID("__OME__autoVar_0");
__OME__autoVar_0.SetName("__OME__autoVar_0");
__OME__autoVar_0.SetInternal(false);
__OME__autoVar_0.SetExpr("root.Input_2");
__OME__autoVar_0.SetAutoGenerated(true);
__OME__autoVar_0.SetExpectsFile(false);
__OME__autoVar_0.SetInitOnly(false);
root.AddVariable(&__OME__autoVar_0);

__OME__autoVar_1.SetID("__OME__autoVar_1");
__OME__autoVar_1.SetName("v_0");
__OME__autoVar_1.SetInternal(false);
__OME__autoVar_1.SetExpr("root.Input_1");
__OME__autoVar_1.SetAutoGenerated(true);
__OME__autoVar_1.SetExpectsFile(false);
__OME__autoVar_1.SetInitOnly(false);
root.AddVariable(&__OME__autoVar_1);

__OME__autoVar_2.SetID("__OME__autoVar_2");
__OME__autoVar_2.SetName("__OME__autoVar_2");
__OME__autoVar_2.SetInternal(false);
__OME__autoVar_2.SetExpr("(root.v_0-root.__OME_autoSV_0)/(root.__OME_autoSV_0*root.__OME_autoVar_0)");
__OME__autoVar_2.SetAutoGenerated(true);
__OME__autoVar_2.SetExpectsFile(false);
__OME__autoVar_2.SetInitOnly(false);
root.AddVariable(&__OME__autoVar_2);

__OME__autoVar_3.SetID("__OME__autoVar_3");
__OME__autoVar_3.SetName("__OME__autoVar_3");
__OME__autoVar_3.SetInternal(false);
__OME__autoVar_3.SetExpr("root.v_0*(1.0+root.__OME_autoVar_2*(root.Input_3))");
__OME__autoVar_3.SetAutoGenerated(true);
__OME__autoVar_3.SetExpectsFile(false);
__OME__autoVar_3.SetInitOnly(false);
root.AddVariable(&__OME__autoVar_3);

__OME__autoVar_4.SetID("__OME__autoVar_4");
__OME__autoVar_4.SetName("__OME__autoVar_4");
__OME__autoVar_4.SetInternal(false);
__OME__autoVar_4.SetExpr("root.Input_2");
__OME__autoVar_4.SetAutoGenerated(true);
__OME__autoVar_4.SetExpectsFile(false);
__OME__autoVar_4.SetInitOnly(false);
root.AddVariable(&__OME__autoVar_4);

__OME__autoVar_5.SetID("__OME__autoVar_5");
__OME__autoVar_5.SetName("v_6");
__OME__autoVar_5.SetInternal(false);
__OME__autoVar_5.SetExpr("root.Input_1");
__OME__autoVar_5.SetAutoGenerated(true);
__OME__autoVar_5.SetExpectsFile(false);
__OME__autoVar_5.SetInitOnly(false);
root.AddVariable(&__OME__autoVar_5);

__OME__autoVar_6.SetID("__OME__autoVar_6");
__OME__autoVar_6.SetName("__OME__autoVar_6");
__OME__autoVar_6.SetInternal(false);
__OME__autoVar_6.SetExpr("(root.v_6-root.__OME_autoSV_1)/(root.__OME_autoSV_1*root.__OME_autoVar_4)");
__OME__autoVar_6.SetInitExpr("root.Input_3");
__OME__autoVar_6.SetAutoGenerated(true);
__OME__autoVar_6.SetExpectsFile(false);
__OME__autoVar_6.SetInitOnly(false);
root.AddVariable(&__OME__autoVar_6);

__OME__autoSV_0.SetID("__OME__autoSV_0");
__OME__autoSV_0.SetName("__OME__autoSV_0");
__OME__autoSV_0.SetInternal(false);
__OME__autoSV_0.SetExpr("root.Input_1");
__OME__autoSV_0.SetAutoGenerated(true);
root.AddStateVar(&__OME__autoSV_0);

__OME__autoSV_1.SetID("__OME__autoSV_1");
__OME__autoSV_1.SetName("__OME__autoSV_1");
__OME__autoSV_1.SetInternal(false);
__OME__autoSV_1.SetExpr("(root.v_6)/(1.0+((root.Input_3)*root.__OME_autoVar_4))");
__OME__autoSV_1.SetAutoGenerated(true);
root.AddStateVar(&__OME__autoSV_1);

__OME__autoFlow_0.SetID("__OME__autoFlow_0");
__OME__autoFlow_0.SetName("__OME__autoFlow_0");
__OME__autoFlow_0.SetInternal(false);
__OME__autoFlow_0.SetExpr("(root.v_0-root.__OME_autoSV_0)/root.__OME_autoVar_0");
__OME__autoFlow_0.SetAutoGenerated(true);
__OME__autoFlow_0.SetTargetID("__OME__autoSV_0");
root.AddFlow(&__OME__autoFlow_0);

__OME__autoFlow_1.SetID("__OME__autoFlow_1");
__OME__autoFlow_1.SetName("__OME__autoFlow_1");
__OME__autoFlow_1.SetInternal(false);
__OME__autoFlow_1.SetExpr("(root.v_6-root.__OME_autoSV_1)/root.__OME_autoVar_4");
__OME__autoFlow_1.SetAutoGenerated(true);
__OME__autoFlow_1.SetTargetID("__OME__autoSV_1");
root.AddFlow(&__OME__autoFlow_1);

root.JoinLinks(true,true);
//Begin Lookup table


Register(&root);
Register(&v_0);
Register(&v_1);
Register(&v_2);
Register(&v_3);
Register(&v_4);
Register(&v_5);
Register(&v_6);
Register(&__OME__autoVar_0);
Register(&__OME__autoVar_1);
Register(&__OME__autoVar_2);
Register(&__OME__autoVar_3);
Register(&__OME__autoVar_4);
Register(&__OME__autoVar_5);
Register(&__OME__autoVar_6);
Register(&__OME__autoSV_0);
Register(&__OME__autoSV_1);
Register(&__OME__autoFlow_0);
Register(&__OME__autoFlow_1);
root.JoinAliases();
return &root;
}

void TestModel::DoInit(const OME_SCALAR & TestModelTime, BaseManager* TestModelBm,ISpatialDataProvider* TestModelSDP)
{
using namespace TestModelDefs;
using namespace OMECFuncs;
//=-=-=-=-=-=-=-=-=-= v_1 (Input_1)
v_1.Reset(TestModelBm);
v_1=(OME_SCALAR)1.0;
v_1.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoVar_5 (v_6)
__OME__autoVar_5.Reset(TestModelBm);
__OME__autoVar_5=(OME_SCALAR)v_1;
__OME__autoVar_5.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= v_2 (Input_2)
v_2.Reset(TestModelBm);
v_2=(OME_SCALAR)1.0;
v_2.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoVar_4 (__OME_autoVar_4)
__OME__autoVar_4.Reset(TestModelBm);
__OME__autoVar_4=(OME_SCALAR)v_2;
__OME__autoVar_4.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= v_3 (Input_3)
v_3.Reset(TestModelBm);
v_3=(OME_SCALAR)1.0;
v_3.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoSV_1 (__OME_autoSV_1)
__OME__autoSV_1.Reset(TestModelBm);
__OME__autoSV_1=(OME_SCALAR)(__OME__autoVar_5)/(1.0+((v_3)*__OME__autoVar_4));
__OME__autoSV_1.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_1 (__OME_autoFlow_1)
__OME__autoFlow_1.Reset(TestModelBm);
__OME__autoFlow_1=(OME_SCALAR)(__OME__autoVar_5-__OME__autoSV_1)/__OME__autoVar_4;
__OME__autoFlow_1.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoVar_1 (v_0)
__OME__autoVar_1.Reset(TestModelBm);
__OME__autoVar_1=(OME_SCALAR)v_1;
__OME__autoVar_1.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoSV_0 (__OME_autoSV_0)
__OME__autoSV_0.Reset(TestModelBm);
__OME__autoSV_0=(OME_SCALAR)v_1;
__OME__autoSV_0.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoVar_0 (__OME_autoVar_0)
__OME__autoVar_0.Reset(TestModelBm);
__OME__autoVar_0=(OME_SCALAR)v_2;
__OME__autoVar_0.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_0 (__OME_autoFlow_0)
__OME__autoFlow_0.Reset(TestModelBm);
__OME__autoFlow_0=(OME_SCALAR)(__OME__autoVar_1-__OME__autoSV_0)/__OME__autoVar_0;
__OME__autoFlow_0.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoVar_2 (__OME_autoVar_2)
__OME__autoVar_2.Reset(TestModelBm);
__OME__autoVar_2=(OME_SCALAR)(__OME__autoVar_1-__OME__autoSV_0)/(__OME__autoSV_0*__OME__autoVar_0);
__OME__autoVar_2.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoVar_3 (__OME_autoVar_3)
__OME__autoVar_3.Reset(TestModelBm);
__OME__autoVar_3=(OME_SCALAR)__OME__autoVar_1*(1.0+__OME__autoVar_2*(v_3));
__OME__autoVar_3.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= v_0 (forecast_test)
v_0.Reset(TestModelBm);
v_0=(OME_SCALAR)__OME__autoVar_3;
v_0.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= v_5 (step_test)
v_5.Reset(TestModelBm);
v_5=(OME_SCALAR)step((v_1),(v_2),TestModelBm);
v_5.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= v_4 (pulse_test)
v_4.Reset(TestModelBm);
v_4=(OME_SCALAR)pulse((1.0),(v_1),(v_2),TestModelBm);
v_4.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= __OME__autoVar_6 (__OME_autoVar_6)
__OME__autoVar_6.Reset(TestModelBm);
__OME__autoVar_6=(OME_SCALAR)v_3;
__OME__autoVar_6.BatchInitialize(TestModelTime,TestModelBm);

//=-=-=-=-=-=-=-=-=-= v_6 (trend_test)
v_6.Reset(TestModelBm);
v_6=(OME_SCALAR)__OME__autoVar_6;
v_6.BatchInitialize(TestModelTime,TestModelBm);
AdjustTempPool();
}

void TestModel::DoUpdate(const OME_SCALAR & TestModelTime, BaseManager* TestModelBm,ISpatialDataProvider* TestModelSDP)
{
using namespace TestModelDefs;
using namespace OMECFuncs;
//=-=-=-=-=-=-=-=-=-= __OME__autoVar_5 (v_6)
__OME__autoVar_5=(OME_SCALAR)v_1;

//=-=-=-=-=-=-=-=-=-= __OME__autoVar_4 (__OME_autoVar_4)
__OME__autoVar_4=(OME_SCALAR)v_2;

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_1 (__OME_autoFlow_1)
__OME__autoFlow_1=(OME_SCALAR)(__OME__autoVar_5-__OME__autoSV_1)/__OME__autoVar_4;

//=-=-=-=-=-=-=-=-=-= __OME__autoVar_6 (__OME_autoVar_6)
__OME__autoVar_6=(OME_SCALAR)(__OME__autoVar_5-__OME__autoSV_1)/(__OME__autoSV_1*__OME__autoVar_4);

//=-=-=-=-=-=-=-=-=-= v_6 (trend_test)
v_6=(OME_SCALAR)__OME__autoVar_6;

//=-=-=-=-=-=-=-=-=-= __OME__autoVar_1 (v_0)
__OME__autoVar_1=(OME_SCALAR)v_1;

//=-=-=-=-=-=-=-=-=-= __OME__autoVar_0 (__OME_autoVar_0)
__OME__autoVar_0=(OME_SCALAR)v_2;

//=-=-=-=-=-=-=-=-=-= __OME__autoFlow_0 (__OME_autoFlow_0)
__OME__autoFlow_0=(OME_SCALAR)(__OME__autoVar_1-__OME__autoSV_0)/__OME__autoVar_0;

//=-=-=-=-=-=-=-=-=-= __OME__autoVar_2 (__OME_autoVar_2)
__OME__autoVar_2=(OME_SCALAR)(__OME__autoVar_1-__OME__autoSV_0)/(__OME__autoSV_0*__OME__autoVar_0);

//=-=-=-=-=-=-=-=-=-= __OME__autoVar_3 (__OME_autoVar_3)
__OME__autoVar_3=(OME_SCALAR)__OME__autoVar_1*(1.0+__OME__autoVar_2*(v_3));

//=-=-=-=-=-=-=-=-=-= v_0 (forecast_test)
v_0=(OME_SCALAR)__OME__autoVar_3;

//=-=-=-=-=-=-=-=-=-= v_5 (step_test)
v_5=(OME_SCALAR)step((v_1),(v_2),TestModelBm);

//=-=-=-=-=-=-=-=-=-= v_4 (pulse_test)
v_4=(OME_SCALAR)pulse((1.0),(v_1),(v_2),TestModelBm);
AdjustTempPool();
}

